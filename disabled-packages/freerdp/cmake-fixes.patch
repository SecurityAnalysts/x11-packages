diff -uNr FreeRDP-2.0.0-rc4/cmake/FindOpenSSL.cmake FreeRDP-2.0.0-rc4.mod/cmake/FindOpenSSL.cmake
--- FreeRDP-2.0.0-rc4/cmake/FindOpenSSL.cmake	2018-11-20 12:43:51.000000000 +0200
+++ FreeRDP-2.0.0-rc4.mod/cmake/FindOpenSSL.cmake	2019-04-02 23:27:08.646142282 +0300
@@ -24,19 +24,21 @@
 # (To distribute this file outside of CMake, substitute the full
 #  License text for the above reference.)
 
-if (UNIX AND NOT ANDROID)
+if (UNIX)
   find_package(PkgConfig QUIET)
   pkg_check_modules(_OPENSSL QUIET openssl)
-endif (UNIX AND NOT ANDROID)
+endif (UNIX)
 
 # http://www.slproweb.com/products/Win32OpenSSL.html
 SET(_OPENSSL_ROOT_HINTS
+  "@TERMUX_PREFIX@"
   $ENV{OPENSSL_ROOT_DIR}
   ${OPENSSL_ROOT_DIR}
   "[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\OpenSSL (32-bit)_is1;Inno Setup: App Path]"
   "[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\OpenSSL (64-bit)_is1;Inno Setup: App Path]"
   )
 SET(_OPENSSL_ROOT_PATHS
+  "@TERMUX_PREFIX@/include/openssl"
   "$ENV{PROGRAMFILES}/OpenSSL"
   "$ENV{PROGRAMFILES}/OpenSSL-Win32"
   "$ENV{PROGRAMFILES}/OpenSSL-Win64"
@@ -71,15 +73,7 @@
   endif()
 ENDIF(WIN32)
 
-IF(ANDROID)
-    FIND_LIBRARY(OPENSSL_LIBRARIES
-      NAMES
-        "freerdp-openssl"
-      ${_OPENSSL_ROOT_HINTS_AND_PATHS}
-      PATH_SUFFIXES
-        "lib"
-    )
-ELSEIF(WIN32 AND NOT CYGWIN)
+IF(WIN32 AND NOT CYGWIN)
   # MINGW should go here too
   IF(MSVC)
     # /MD and /MDd are the standard values - if someone wants to use
diff -uNr FreeRDP-2.0.0-rc4/CMakeLists.txt FreeRDP-2.0.0-rc4.mod/CMakeLists.txt
--- FreeRDP-2.0.0-rc4/CMakeLists.txt	2018-11-20 12:43:51.000000000 +0200
+++ FreeRDP-2.0.0-rc4.mod/CMakeLists.txt	2019-04-02 23:22:20.998153414 +0300
@@ -583,45 +583,6 @@
 	set(WITH_WAYLAND "OFF")
 endif()
 
-# Android
-if(ANDROID)
-	set(WITH_LIBRARY_VERSIONING "OFF")
-
-	set_property( GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS ${ANDROID_LIBRARY_USE_LIB64_PATHS} )
-
-	if (${ANDROID_ABI} STREQUAL "armeabi")
-		set (WITH_NEON OFF)
-	endif()
-
-	if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
-		add_definitions(-DNDK_DEBUG=1)
-
-		# NOTE: Manually add -gdwarf-3, as newer toolchains default to -gdwarf-4,
-		#       which is not supported by the gdbserver binary shipped with
-		#       the android NDK (tested with r9b)
-		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_DEBUG} -gdwarf-3")
-	endif()
-	set(CMAKE_C_LINK_FLAGS "${CMAKE_C_LINK_FLAGS} -llog")
-
-	if (NOT FREERDP_EXTERNAL_PATH)
-		if (IS_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/external/")
-			set (FREERDP_EXTERNAL_PATH "${CMAKE_CURRENT_SOURCE_DIR}/external/")
-		else()
-			message(STATUS "FREERDP_EXTERNAL_PATH not set!")
-		endif()
-	endif()
-
-	list (APPEND CMAKE_INCLUDE_PATH ${FREERDP_EXTERNAL_PATH}/include)
-	list (APPEND CMAKE_LIBRARY_PATH ${FREERDP_EXTERNAL_PATH}/${ANDROID_ABI}/ )
-	set( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH )
-	set( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE BOTH )
-
-	if (WITH_GPROF)
-		CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/scripts/gprof_generate.sh.cmake
-			${CMAKE_BINARY_DIR}/scripts/gprof_generate.sh @ONLY)
-	endif(WITH_GPROF)
-endif()
-
 set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
 
 if(NOT IOS)
@@ -815,7 +776,7 @@
 	set(OPENSLES_FEATURE_TYPE "DISABLED")
 endif()
 
-if(UNIX AND NOT ANDROID)
+if(UNIX)
 	set(WLOG_SYSTEMD_JOURNAL_FEATURE_TYPE "RECOMMENDED")
 	set(WLOG_SYSTEMD_JOURNAL_FEATURE_PURPOSE "systemd journal appender")
 	set(WLOG_SYSTEMD_JOURNAL_FEATURE_DESCRIPTION "allows to export wLog to systemd journal")
@@ -828,23 +789,7 @@
 	else()
 		unset(HAVE_JOURNALD_H)
 	endif()
-endif(UNIX AND NOT ANDROID)
-
-if(ANDROID)
-	set(X11_FEATURE_TYPE "DISABLED")
-	set(WAYLAND_FEATURE_TYPE "DISABLED")
-	set(DIRECTFB_FEATURE_TYPE "DISABLED")
-	set(OSS_FEATURE_TYPE "DISABLED")
-	set(ALSA_FEATURE_TYPE "DISABLED")
-	set(PULSE_FEATURE_TYPE "DISABLED")
-	set(CUPS_FEATURE_TYPE "DISABLED")
-	set(PCSC_FEATURE_TYPE "DISABLED")
-	set(FFMPEG_FEATURE_TYPE "DISABLED")
-	set(VAAPI_FEATURE_TYPE "DISABLED")
-	set(GSTREAMER_1_0_FEATURE_TYPE "DISABLED")
-	set(GSTREAMER_0_10_FEATURE_TYPE "DISABLED")
-	set(OPENSLES_FEATURE_TYPE "REQUIRED")
-endif()
+endif(UNIX)
 
 find_feature(X11 ${X11_FEATURE_TYPE} ${X11_FEATURE_PURPOSE} ${X11_FEATURE_DESCRIPTION})
 find_feature(Wayland ${WAYLAND_FEATURE_TYPE} ${WAYLAND_FEATURE_PURPOSE} ${WAYLAND_FEATURE_DESCRIPTION})
@@ -961,26 +906,17 @@
 	set(WITH_GFX_H264 OFF)
 endif()
 
-# Android expects all libraries to be loadable
-# without paths.
-if (ANDROID)
-	set(FREERDP_DATA_PATH "share")
-	set(FREERDP_INSTALL_PREFIX ".")
-	set(FREERDP_LIBRARY_PATH ".")
-	set(FREERDP_PLUGIN_PATH ".")
-	set(FREERDP_ADDIN_PATH ".")
-else (ANDROID)
-	set(FREERDP_DATA_PATH "${CMAKE_INSTALL_PREFIX}/share/freerdp${FREERDP_VERSION_MAJOR}")
-	set(FREERDP_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}")
-	set(FREERDP_LIBRARY_PATH "${CMAKE_INSTALL_LIBDIR}")
-	set(FREERDP_PLUGIN_PATH "${CMAKE_INSTALL_LIBDIR}/freerdp${FREERDP_VERSION_MAJOR}")
-	set(FREERDP_ADDIN_PATH "${FREERDP_PLUGIN_PATH}")
-endif(ANDROID)
+set(FREERDP_DATA_PATH "${CMAKE_INSTALL_PREFIX}/share/freerdp${FREERDP_VERSION_MAJOR}")
+set(FREERDP_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}")
+set(FREERDP_LIBRARY_PATH "${CMAKE_INSTALL_LIBDIR}")
+set(FREERDP_PLUGIN_PATH "${CMAKE_INSTALL_LIBDIR}/freerdp${FREERDP_VERSION_MAJOR}")
+set(FREERDP_ADDIN_PATH "${FREERDP_PLUGIN_PATH}")
 
 # Path to put extensions
 set(FREERDP_EXTENSION_PATH "${CMAKE_INSTALL_FULL_LIBDIR}/freerdp${FREERDP_VERSION_MAJOR}/extensions")
 
 # Include directories
+include_directories(@TERMUX_PREFIX@/include)
 include_directories(${CMAKE_CURRENT_BINARY_DIR})
 include_directories(${CMAKE_CURRENT_BINARY_DIR}/include)
 include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
@@ -1006,16 +942,6 @@
 	set(CMAKE_MACOSX_RPATH ON)
 endif()
 
-# Android profiling
-if(ANDROID)
-	if(WITH_GPROF)
-		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pg")
-		set(PROFILER_LIBRARIES
-			"${FREERDP_EXTERNAL_PROFILER_PATH}/obj/local/${ANDROID_ABI}/libandroid-ndk-profiler.a")
-		include_directories("${FREERDP_EXTERNAL_PROFILER_PATH}")
-	endif()
-endif()
-
 # Unit Tests
 
 include(CTest)
